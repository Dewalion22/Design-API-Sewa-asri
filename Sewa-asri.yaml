openapi: 3.0.3
info:
  title: Sewa Asri
  description: |-
    Sewa Asri adalah aplikasi mobile yang dapat digunakan untuk booking dan mencari villa terdekat dengan praktis.
  termsOfService: http://sewasri.org/terms/
  contact:
    email: asriteam@sewasri.org
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
externalDocs:
  description: Find out more about Sewa Asri
  url: http://sewasri.org
servers:
  - url: http://localhost:8080/api/
tags:
  - name: Villa
    description: Everything about your holiday in VIlla
    externalDocs:
      description: Find out more
      url: http://sewasri.org
  - name: Booking
    description: Access to Booking Villa orders
    externalDocs:
      description: Find out more about our Villa's
      url: http://sewasri.org
  - name: user
    description: Operations about user
paths:
  /villa/:{villaId}:
    put:
      tags:
        - villa
      summary: Update an existing villa
      description: Update an existing villa by Id
      operationId: updatevilla
      requestBody:
        description: Update an existent villa in booking
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/villa'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/villa'
        '400':
          description: Invalid ID supplied
        '404':
          description: villa not found
        '405':
          description: Validation exception
      security:
        - villabooking_auth:
            - write:villas
            - read:villas
    post:
      tags:
        - villa
      summary: create new villa
      description: Add a new villa
      operationId: addvilla
      requestBody:
        description: Create a villa villa in the booking
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/villa'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/villa'
        '405':
          description: Invalid input
      security:
        - villabooking_auth:
            - write:villa's
            - read:villa's
  /villa/findByStatus:
    get:
      tags:
        - villa
      summary: Finds villas by status
      description: Multiple status values can be provided with comma separated strings
      operationId: findvillasByStatus
      parameters:
        - name: status
          in: query
          description: Status values that need to be considered for filter
          required: false
          explode: true
          schema:
            type: string
            default: available
            enum:
              - available
              - pending
              - sold
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/villa'
        '400':
          description: Invalid status value
      security:
        - villabooking_auth:
            - write:villas
            - read:villas
  /villa/findByTags:
    get:
      tags:
        - villa
      summary: Finds villas by tags
      description: Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
      operationId: findvillasByTags
      parameters:
        - name: status
          in: query
          description: Status values that need to be considered for filter
          required: false
          explode: true
          schema:
            type: string
            default: available
            enum:
              - Termurah
              - Termahal
              - Dua kamar
              - Tiga Kamar
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/villa'
        '400':
          description: Invalid tag value
      security:
        - villabooking_auth:
            - write:villas
            - read:villas
  /villa/{villaId}:
    get:
      tags:
        - villa
      summary: Find villa by ID
      description: Returns a single detail villa
      operationId: getvillaById
      parameters:
        - name: villaId
          in: path
          description: ID of villa to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/villa'
        '400':
          description: Invalid ID supplied
        '404':
          description: villa not found
      security:
        - api_key: []
        - villabooking_auth:
            - write:villas
            - read:villas
    post:
      tags:
        - villa
      summary: Updates a villa in the booking with form data
      description: ''
      operationId: updatevillaWithForm
      parameters:
        - name: villaId
          in: path
          description: ID of villa that needs to be updated
          required: true
          schema:
            type: integer
            format: int64
        - name: name
          in: query
          description: Name of villa that needs to be updated
          schema:
            type: string
        - name: status
          in: query
          description: Status of villa that needs to be updated
          schema:
            type: string
      responses:
        '405':
          description: Invalid input
      security:
        - villabooking_auth:
            - write:villas
            - read:villas
    delete:
      tags:
        - villa
      summary: Deletes a villa
      description: delete a villa
      operationId: deletevilla
      parameters:
        - name: api_key
          in: header
          description: ''
          required: false
          schema:
            type: string
        - name: villaId
          in: path
          description: villa id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid villa value
      security:
        - villabooking_auth:
            - write:villas
            - read:villas
  /villa/{villaId}/uploadImage:
    post:
      tags:
        - villa
      summary: uploads an image
      description: ''
      operationId: uploadFile
      parameters:
        - name: villaId
          in: path
          description: ID of villa to update
          required: true
          schema:
            type: integer
            format: int64
        - name: additionalMetadata
          in: query
          description: Additional Metadata
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/octet-stream:
            schema:
              type: string
              format: binary
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
      security:
        - villabooking_auth:
            - write:villas
            - read:villas
  /booking/inventory:
    get:
      tags:
        - booking
      summary: Returns villa inventories by status
      description: Returns a map of status codes to quantities
      operationId: getInventory
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: integer
                  format: int32
      security:
        - api_key: []
  /booking/order:
    post:
      tags:
        - booking
      summary: Place an order for a villa
      description: Place a new order in the booking
      operationId: placeOrder
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
          application/xml:
            schema:
              $ref: '#/components/schemas/Order'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Order'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '405':
          description: Invalid input
  /booking/order/:{orderId}:
    get:
      tags:
        - booking
      summary: Find purchase order by ID
      description: For valid response try integer IDs with value <= 5 or > 10. Other values will generate exceptions.
      operationId: getOrderById
      parameters:
        - name: orderId
          in: path
          description: ID of order that needs to be fetched
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
            application/xml:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Invalid ID supplied
        '404':
          description: Order not found
    delete:
      tags:
        - booking
      summary: Delete purchase order by ID
      description: For valid response try integer IDs with value < 1000. Anything above 1000 or nonintegers will generate API errors
      operationId: deleteOrder
      parameters:
        - name: orderId
          in: path
          description: ID of the order that needs to be deleted
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: Order not found
  /user:
    post:
      tags:
        - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
  /user/createWithList:
    post:
      tags:
        - user
      summary: Creates list of users with given input array
      description: Creates list of users with given input array
      operationId: createUsersWithListInput
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/User'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        default:
          description: successful operation
  /user/login:
    post:
      tags:
        - user
      summary: Logs user into the system
      description: ''
      operationId: loginUser
      parameters:
        - name: username
          in: query
          description: The user name for login
          required: true
          schema:
            type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/json:
              schema:
                type: string
        '400':
          description: Invalid username/password supplied
  /user/logout:
    get:
      tags:
        - user
      summary: Logs out current logged in user session
      description: ''
      operationId: logoutUser
      parameters: []
      responses:
        default:
          description: successful operation
  /user/:{username}:
    get:
      tags:
        - user
      summary: Get user by user name
      description: ''
      operationId: getUserByName
      parameters:
        - name: username
          in: path
          description: 'The name that needs to be fetched. Use user1 for testing. '
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
    put:
      tags:
        - user
      summary: Update user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
        - name: username
          in: path
          description: name that need to be update
          required: true
          schema:
            type: string
      requestBody:
        description: Update an existent user in the booking
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: successful operation
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
        - name: username
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
components:
  schemas:
    Order:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        villaId:
          type: integer
          format: int64
          example: 198772
        quantity:
          type: integer
          format: int32
          example: 7
        shipDate:
          type: string
          format: date-time
        status:
          type: string
          description: Order Status
          example: approved
          enum:
            - placed
            - approved
            - delivered
        complete:
          type: boolean
    Customer:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 100000
        username:
          type: string
          example: fehguy
        address:
          type: array
          xml:
            name: addresses
            wrapped: true
          items:
            $ref: '#/components/schemas/Address'
    Address:
      type: object
      properties:
        street:
          type: string
          example: Jl gunung 123
        city:
          type: string
          example: Bali
        state:
          type: string
          example: Indonesia
        zip:
          type: string
          example: '94301'
    Category:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: Termurah

    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        username:
          type: string
          example: theUser
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: James
        email:
          type: string
          example: john@email.com
        password:
          type: string
          example: "undefined"
        phone:
          type: string
          example: '12345'
        isAdmin:
          type: boolean
          description: is Admin
          format: int32
          example: false
    Tag:
      type: object
      properties:
        name:
          type: string
        termurah:
          type: string
        termahal:
          type: string
        terdekat:
          type: string
        terjauh :
          type : string
        terpopuler:
          type: string
        dua kamar:
          type : string
        tiga kamar:
          type : string

    villa:
      required:
        - name
        - photoUrls
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        name:
          type: string
          example: Villa
        category:
          $ref: '#/components/schemas/Category'
        photoUrls:
          type: array
          xml:
            wrapped: true
          items:
            type: string
            xml:
              name: photoUrl
        status:
          type: string
          description: villa status in the booking
          enum:
            - available
            - pending
            - sold
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
  requestBodies:
    villa:
      description: villa object that needs to be added to the booking
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/villa'
    UserArray:
      description: List of user object
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/User'
  securitySchemes:
    villabooking_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://villabooking3.swagger.io/oauth/authorize
          scopes:
            write:villas: modify villas in your account
            read:villas: read your villas
    api_key:
      type: apiKey
      name: api_key
      in: header