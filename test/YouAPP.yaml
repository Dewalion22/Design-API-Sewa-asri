openapi: 3.0.3
info:
  title: Technical Challenge - Backend
  description: |-
    Test YOU-APP BACK END CHALLENGER- DESIGN API
  termsOfService: http://You-App.org/terms/
  contact:
    email: test email
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
externalDocs:
  description: Find out more about Your APP
  url: http://test.org
servers:
  - url: https://test.org.io/api/v1
paths:
  /api/createProfile:
    post:
      parameters:
      - in: header
        name: X-username
      tags:
        - Profile
      summary: Create Profile
      description: This can only be done by the logged in user.
      operationId: createUser
      requestBody:
        required: true
        description: Created user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUSerDto'
      responses:
        '200':
          description: Profile has been created
  /api/getProfile:
    get:
      parameters:
      - in: header
        name: X-username
      tags:
        - Profile
      summary: Get Profile
      responses:
        '200':
          description: Profile has been found
  /api/updateProfile:
    put:
      parameters:
       in: header
       name: X-username
      tags:
        - Profile
      summary: Create Profile
      description: This can only be done by the logged in user.
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUSerDto'
      responses:
        '200':
          description: Profile has been updated
  /api/register:
    put:
      tags:
        - auth
      summary: Update user
      operationId: updateUser
      requestBody:
        required: true
        description: Register User
        content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegisterDto'
      responses:
        default:
          description: User has been created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegisterDto'
  /api/login:
    post :
      tags:
        - auth
      summary: login user
      description: This Login User
      operationId: loginUser
      requestBody:
        required: true
        description: Login User
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginDto'
      responses:
        '200':
          description: User Has been logged in
components:
  schemas:
    CreateUSerDto:
      type: object
      properties:
        name:
          type: string
          example: Udin
        birthday:
          type: string
          example: 12-12-1998
        heroscope:
          type: string
          example: buffalo
        zodiac:
          type: string
          example: aries
        height:
          type: integer
          example: 60
        weight:
          type: integer
          example: 123
        interest:
          type: array
          items:
            type: string
    UpdateUSerDto:
      type: object
      properties:
        name:
          type: string
          example: Udin
        birthday:
          type: string
          example: 12-12-1998
        heroscope:
          type: string
          example: buffalo
        zodiac:
          type: string
          example: aries
        height:
          type: integer
          example: 60
        weight:
          type: integer
          example: 123
        interest:
          type: array
          items:
            type: string
    RegisterDto:
      type: object
      properties:
        email:
          type: string
          example: Udin@test.com
        username:
          type: string
          example: Udin12343
        password:
          type: string
          example: 1234556QQ
    LoginDto:
      type: object
      properties:
        email:
          type: string
          example: Udin
        username:
          type: string
          example: Udin123
        password:
          type: string
          example: 1234556QQ


